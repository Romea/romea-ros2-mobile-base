#include "romea_mobile_base_hardware_interfaces/odometry_hardware_interface1FAS2FWD.hpp"


namespace romea
{

////-----------------------------------------------------------------------------
//BaseHardwareInterface1FAS2FWD::
//BaseHardwareInterface1FAS2FWD(const Parameters & parameters,
//                                  const std::string & joints_prefix,
//                                  const hardware_interface::HardwareInfo &hardware_info):
//  front_steering_joint_(hardware_info,
//                        joints_prefix + parameters.front_axle_steering_joint_name),
//  front_left_spinning_joint_(hardware_info,
//                             joints_prefix+parameters.front_left_wheel_spinning_joint_name,
//                             parameters.front_wheel_radius),
//  front_right_spinning_joint_(hardware_info,
//                              joints_prefix+parameters.front_left_wheel_spinning_joint_name,
//                              parameters.front_wheel_radius)
//{

//-----------------------------------------------------------------------------
BaseHardwareInterface1FAS2FWD::
BaseHardwareInterface1FAS2FWD(const Parameters & parameters,
                              const std::string & joints_prefix,
                              const hardware_interface::HardwareInfo &hardware_info):
  front_steering_joint_(nullptr),
  front_left_spinning_joint_(nullptr),
  front_right_spinning_joint_(nullptr)
{
  
  front_steering_joint_= makeSteeringJointHarwareInterface(
        hardware_info,joints_prefix + parameters.front_axle_steering_joint_name);
  
  front_left_spinning_joint_= makeSpinningJointHarwareInterface(
        hardware_info,joints_prefix+parameters.front_left_wheel_spinning_joint_name,parameters.front_wheels_radius);
  
  front_right_spinning_joint_ = makeSpinningJointHarwareInterface(
        hardware_info,joints_prefix+parameters.front_left_wheel_spinning_joint_name,parameters.front_wheels_radius);
  
}

//-----------------------------------------------------------------------------
void BaseHardwareInterface1FAS2FWD::setMeasurement(const OdometryFrame1FAS2FWD &command)
{
  front_steering_joint_->setMeasurement(command.frontAxleSteeringAngle);
  front_left_spinning_joint_->setMeasurement(command.frontLeftWheelSpeed);
  front_right_spinning_joint_->setMeasurement(command.frontRightWheelSpeed);
}

//-----------------------------------------------------------------------------
OdometryFrame1FAS2FWD BaseHardwareInterface1FAS2FWD::getCommand() const
{
  OdometryFrame1FAS2FWD command;
  command.frontAxleSteeringAngle = front_steering_joint_->getCommand();
  command.frontLeftWheelSpeed = front_left_spinning_joint_->getCommand();
  command.frontRightWheelSpeed = front_right_spinning_joint_->getCommand();
  return command;
}

//-----------------------------------------------------------------------------
std::vector<hardware_interface::StateInterface> BaseHardwareInterface1FAS2FWD::export_state_interfaces()
{
  std::vector<hardware_interface::StateInterface> state_interfaces;
  state_interfaces.emplace_back(front_steering_joint_->exportStateInterface());
  state_interfaces.emplace_back(front_left_spinning_joint_->exportStateInterface());
  state_interfaces.emplace_back(front_right_spinning_joint_->exportStateInterface());
  return state_interfaces;
}

//-----------------------------------------------------------------------------
std::vector<hardware_interface::CommandInterface> BaseHardwareInterface1FAS2FWD::export_command_interfaces()
{
  std::vector<hardware_interface::CommandInterface> command_interfaces;
  command_interfaces.emplace_back(front_steering_joint_->exportCommandInterface());
  command_interfaces.emplace_back(front_left_spinning_joint_->exportCommandInterface());
  command_interfaces.emplace_back(front_right_spinning_joint_->exportCommandInterface());
  return command_interfaces;
}



}

